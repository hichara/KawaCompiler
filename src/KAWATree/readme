KAWATree permet de gérer l'arbre sémantique et facilite l'écriture d'un programme c++ représentant le code Kawa à fournir au backend.

Utile pour les test.
Indispensable pour le developpement.

Les debug sont terminés. Ils permettent de tester si la programme monté en mémoire est celui qui est écrit en C++.
Par exemple, controler si le programme virtuel kawa monté en mémoire dans KawaTreeHelloWorld est bien celui souhaité.


Problème résolu
---------------

Le bug rencontré ici est subtile. En gros dans le programme il y a un PrintString qui hérite de Print qui hérite de Instruction. Instruction implémente CompilerNode qui possède une méthode virtuelle debug. Le BodyMethod contient une liste d'Instruction sur laquelle une à une les Instructions appelleront leur méthode debug.
Je comptais sur le polymorphisme de PrintString pour y définir debug, mais cela ne fonctionne pas.


Integration des générateurs de code intermédiares
-------------------------------------------------

A ma disposition, j'ai les classe:

- FunctionGenerator : Permet de creer et d'obtenir des fonction llvm
- CallGenerator : genere le code d'appele de fonction
- PrimitiveCreator : permet de creer des valeur primitive

Modifes apportées :

- KAWATreeMonolithicCompiler : Ajout attribut LLVMModule
- KAWATreeMonolithicCompiler : Modif fu constructeur, instanciation d'un llvm::Module et LLVMConext
- KAWATreeMonolithicCompiler : Ajout constructeur prenant en parametre le nom voulu pour le module
- KAWATreeMonolithicCompiler : Modif des fonction de compile
- MakeFile : ajout des flags de compilation
- KawaTreeHelloWorld : Modif ligne 



Remarques
-----------

- Pour KAWATreeBodyMethod, il faudrait un lien vers le l'objet KAWATreeMethod parent
- Pour les instruction il faudrait une liaison entre l'instruction et le bloc auquel il apparatient
- Impossible d'accerder aux memebres externes des element